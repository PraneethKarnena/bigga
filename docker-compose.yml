version: '3'

volumes:
  elastic_data: {}
  mongo_data: {}
  neo4j_data: {}
  postgres_data: {}
  rabbitmq_data: {}
  solr_data: {}
  traefik_acme: {}

services:
  elasticsearch:
    env_file: .env
    image: docker.elastic.co/elasticsearch/elasticsearch
    # environment:
    #   - bootstrap.memory_lock=true
    #   - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - 9200

  mongo:
    env_file: .env
    restart: always
    image: mongo:latest
    ports:
      - 27017
    volumes:
      - mongo_data:/data/db


  neo4j:
    env_file: .env
    restart: always
    image: neo4j:latest
    ports:
      - 7687
      # - 7474
    volumes:
      - neo4j_data:/data
    # Uncomment port and below lines to make n4j browser accessible
    # labels:
      # - traefik.port=7474
      # - traefik.enable=true
      # - traefik.backend.domain=${NEO4J_BROWSER_HOST}
      # - traefik.frontend.rule=Host:${NEO4J_BROWSER_HOST}

  postgres:
    env_file: .env
    restart: always
    image: postgres:latest
    ports:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  rabbitmq:
    env_file: .env
    restart: always
    image: rabbitmq:latest
    ports:
      - 5672
    volumes:
      - rabbitmq_data:/data

  redis:
    env_file: .env
    restart: always
    image: redis:latest
    ports:
      - 6379

  solr:
    env_file: .env
    build: solr
    volumes:
      - solr_data:/var/solr
    ports:
      - 8983

  worker: &worker
    env_file: .env
    restart: always
    build: ./backend  # Change this to your backend path. ed: ../my/backend/path
    command: celery -A myapp.tasks worker --loglevel=info
    links:
      - mongo:mongo
      - rabbitmq:rabbitmq
      - postgres:postgres
      - redis:redis

  backend:
    <<: *worker
    command: gunicorn autoapp:app -b :${BACKEND_PORT}
    expose:
      - ${BACKEND_PORT}
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${BACKEND_DOMAIN}
      - traefik.frontend.rule=Host:${BACKEND_DOMAIN}

  socket:
    <<: *worker
    command: python sio_server.py ${SOCKET_PORT}
    expose:
      - ${SOCKET_PORT}
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${SOCKET_DOMAIN}
      - traefik.frontend.rule=Host:${SOCKET_DOMAIN}

  # This is ONLY for apps that needs to support SSR.
  # If you don't use SSR, folow S3_FRONTEND_DEPLOYMENT.md to deploy directly on s3
  ssrfrontend:
    env_file: .env
    restart: always
    build: ./ssrfrontend  # Change this to your frontend path. ed: ../my/frontent/path
    command: PORT=${SSRFRONTEND_PORT} npm run serve:ssr
    expose:
      - ${SSRFRONTEND_PORT}
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${SSRFRONTEND_DOMAIN}
      - traefik.frontend.rule=Host:${SSRFRONTEND_DOMAIN}

  traefik:
    env_file: .env
    build: traefik
    depends_on:
      - backend
      - ssrfrontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_acme:/etc/traefik/acme/ # Defined in traefik/traefik.toml
    ports:
      - 0.0.0.0:80:80
      - 0.0.0.0:443:443
